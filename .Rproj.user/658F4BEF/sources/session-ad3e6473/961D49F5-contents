
# packages ----------------------------------------------------------------

library(ausplotsR)
library(tidyverse)
library(sf)
library(rgdal)
library(ggplot2)
library(galah)
library(austraits)
library(ggthemes)
library(here)



# ausplot data ------------------------------------------------------------

#chose the below plots for proximity to fowlers gap based on THIS map of plots https://www.tern.org.au/news-gap-filling/
#NSABHC0009 = emu pen

plots_oi <- c('NSABHC0009', 'NSABHC0010', 'NSABHC0011', 'NSABHC0012', 'NSABHC0028', 'NSABHC0029')

veg <- get_ausplots(plots_oi, veg.vouchers = T, veg.PI = T)

veg$site.info$visit_date

vegPI <- veg$veg.PI

# Extract only direction of the transect (no numbers)
vegPI$transect_direction <- gsub('[[:digit:]]+', '', vegPI$transect)

# Extract only number of the transect (no direction)
vegPI$transect_number <- as.numeric(gsub(".*?([0-9]+).*", "\\1", vegPI$transect))

# Create variable for fixed transect direction (to order them all transects in the same direction)
vegPI$transect_direction2 <- NA 

# Create variable for fixed point number (inverse in some cases as if they had been collected in the same direction)
vegPI$point_number2 <- NA 

# Create XY empty variables for plot XY coordinates
vegPI$X_plot <- NA 
vegPI$Y_plot <- NA

# For loop to homogenize transects and numbers. It converts all E-W to W-E and all S-N to N-S
for (i in 1:nrow(vegPI)){
  if (vegPI[i, "transect_direction"] == "E-W") {
    vegPI[i, "point_number2"] <- 101 - vegPI[i, "point_number"] # If transect E-W, transect fixed is W-E and inverse numbers
    vegPI[i, "transect_direction2"] <- "W-E"
  }
  if (vegPI[i, "transect_direction"] == "W-E") {
    vegPI[i, "point_number2"] <- vegPI[i, "point_number"] # If transect W-E, all stays the same
    vegPI[i, "transect_direction2"] <- "W-E"
  }
  if (vegPI[i, "transect_direction"] == "N-S") {
    vegPI[i, "point_number2"] <- vegPI[i, "point_number"] # If transect N-S, all stays the same
    vegPI[i, "transect_direction2"] <- "N-S"
  }
  if (vegPI[i, "transect_direction"] == "S-N") {
    vegPI[i, "point_number2"] <- 101 - vegPI[i, "point_number"] # If transect S-N, transect fixed is N-S and inverse numbers
    vegPI[i, "transect_direction2"] <- "N-S"
  }
}

# For loop to assign plotXY coordinates to each point intercept
for (i in 1:nrow(vegPI)){
  if (vegPI[i, "transect_direction2"] == "W-E") {
    if (vegPI[i, "transect_number"] == 1){
      vegPI[i, "Y_plot"] <- 10
      vegPI[i, "X_plot"] <- vegPI[i, "point_number2"]
    }
    if (vegPI[i, "transect_number"] == 2){
      vegPI[i, "Y_plot"] <- 30
      vegPI[i, "X_plot"] <- vegPI[i, "point_number2"]
    }
    if (vegPI[i, "transect_number"] == 3){
      vegPI[i, "Y_plot"] <- 50
      vegPI[i, "X_plot"] <- vegPI[i, "point_number2"]
    }
    if (vegPI[i, "transect_number"] == 4){
      vegPI[i, "Y_plot"] <- 70
      vegPI[i, "X_plot"] <- vegPI[i, "point_number2"]
    }
    if (vegPI[i, "transect_number"] == 5){
      vegPI[i, "Y_plot"] <- 90
      vegPI[i, "X_plot"] <- vegPI[i, "point_number2"]
    }
  }
  if (vegPI[i, "transect_direction2"] == "N-S") {
    if (vegPI[i, "transect_number"] == 1){
      vegPI[i, "X_plot"] <- 10
      vegPI[i, "Y_plot"] <- vegPI[i, "point_number2"]
    }
    if (vegPI[i, "transect_number"] == 2){
      vegPI[i, "X_plot"] <- 30
      vegPI[i, "Y_plot"] <- vegPI[i, "point_number2"]
    }
    if (vegPI[i, "transect_number"] == 3){
      vegPI[i, "X_plot"] <- 50
      vegPI[i, "Y_plot"] <- vegPI[i, "point_number2"]
    }
    if (vegPI[i, "transect_number"] == 4){
      vegPI[i, "X_plot"] <- 70
      vegPI[i, "Y_plot"] <- vegPI[i, "point_number2"]
    }
    if (vegPI[i, "transect_number"] == 5){
      vegPI[i, "X_plot"] <- 90
      vegPI[i, "Y_plot"] <- vegPI[i, "point_number2"]
    }
  }
}

veg[]

vegPI %>% 
  filter(site_location_visit_id == 53604) %>% #emu pen visit
  drop_na(herbarium_determination) %>%
  ggplot(aes(x = X_plot, y = Y_plot, shape = family, color = family)) +
  geom_point() +
  scale_shape_manual(values = c(1:19)) +
  theme_classic() +
  labs(y = 'West (m)', x = 'South (m)')


# get ALA data and apply threat status ------------------------------------



galah_config(email = 'adelegemmell@hotmail.com')

FG_area <- st_read('data/unsw-fowlers.kml')

fowlers_veg <- galah_call() |>
  galah_identify("plantae") |>
  galah_geolocate(FG_area) |>
  atlas_occurrences()

select <- c(colnames(fowlers_veg)[1:8], "genus", "family")

fowlers_veg <- galah_call() |>
  galah_identify("plantae") |>
  galah_select(select) |>
  galah_geolocate(FG_area) |>
  atlas_occurrences()

fowlers_veg$year <- as.numeric(substr(fowlers_veg$eventDate, 1, 4))

fowlers_veg %>%
  filter(year >= 1940) %>%
  ggplot() +
  geom_bar(aes(x = year, fill = family)) +
  theme_classic() +
  theme(legend.position = 'none')

#ggsave('maps/family_occurence.png', width = 15, height = 7)

#this was to download the ConR package - not using RN
install.packages("devtools")
devtools::install_github("gdauby/ConR")
library(ConR)

# downloaded threatened status of NSW/SA plants from https://www.environment.gov.au/sprat-public/action/report 
threatflora <- read.csv('data/EPBC Threatened Flora plus SA.csv')

#create count df with counts of # records in ALA data
veg_count <- fowlers_veg %>%
  group_by(scientificName) %>%
  summarise(count = n()) 

#create count df with counts of # records in ausplot data
ausplot_counts <- vegPI %>%
  group_by(herbarium_determination) %>%
  summarise(count = n())

# find the matching conservation status for a given species name and status column (doesn't account for synonyms etc)
findConservationStatus <- function(species_name, status_column) {
  matching_index <- which(species_name %in% threatflora$scientificName |
                            species_name %in% threatflora$EPBC_Name |
                            species_name %in% threatflora$NSW_Name |
                            species_name %in% threatflora$IUCN_Name |
                            species_name %in% threatflora$SA_Name)
  
  if (length(matching_index) > 0) {
    # If there is a match, return the corresponding conservation status from the specified column
    return(threatflora[[status_column]][matching_index[1]])
  } else {
    # If no match is found, return NA or any default value
    return(NA)
  }
}

# create  new column for EPBC threat status
veg_count$EPBC_Status <- mapply(findConservationStatus, veg_count$scientificName, "EPBC_Status")

# create new column for NSW threat status
veg_count$NSW_Status <- mapply(findConservationStatus, veg_count$scientificName, "NSW_Status")

# create new column for IUCN threat status
veg_count$IUCN_Status <- mapply(findConservationStatus, veg_count$scientificName, "IUCN_Status")

# create new column for SA threat status
veg_count$SA_Status <- mapply(findConservationStatus, veg_count$scientificName, "SA_Status")

veg_count$SA <- mapply(findConservationStatus, veg_count$scientificName, "SA")

veg_count$NSW <- mapply(findConservationStatus, veg_count$scientificName, "NSW")


# create new column for EPBC threat status
ausplot_counts$EPBC_Status <- mapply(findConservationStatus, ausplot_counts$herbarium_determination, "EPBC_Status")

# create new column for NSW threat status
ausplot_counts$NSW_Status <- mapply(findConservationStatus, ausplot_counts$herbarium_determination, "NSW_Status")

# create new column for IUCN threat status
ausplot_counts$IUCN_Status <- mapply(findConservationStatus, ausplot_counts$herbarium_determination, "IUCN_Status")

# create new column for SA threat status
ausplot_counts$SA_Status <- mapply(findConservationStatus, ausplot_counts$herbarium_determination, "SA_Status")

# create new column for SA presence
ausplot_counts$SA <- mapply(findConservationStatus, ausplot_counts$herbarium_determination, "SA")

# create new column for SA presence
ausplot_counts$NSW <- mapply(findConservationStatus, ausplot_counts$herbarium_determination, "NSW")


# austraits - extract annual traits ---------------------------------------

austraits <- load_austraits(version = "5.0.0", path = "intro/downloads")

#extract life history traits
annual_perennial_traits <- austraits %>% extract_trait('life_history')

#down with tibbles
annual_perennial_traits <- left_join(annual_perennial_traits[["traits"]], annual_perennial_traits[["taxa"]], by = "taxon_name")

#unique taxa with life history traits
length(unique(annual_perennial_traits$taxon_name))
#28332

#different life history values
unique(annual_perennial_traits$value)
# [1] "perennial"                                       "biennial perennial"       # [3] "annual"                                          "annual perennial"         # [5] "biennial"                                        "annual biennial"          # [7] "annual short_lived_perennial"                    "ephemeral"                # [9] "short_lived_perennial"                           "annual ephemeral"        #[11] "annual biennial perennial"                       "biennial short_lived_perennial"                 
#[13] "annual ephemeral perennial"                      "annual biennial short_lived_perennial"          
#[15] "perennial short_lived_perennial"                 "biennial perennial short_lived_perennial"       
#[17] "annual perennial short_lived_perennial"          "ephemeral short_lived_perennial"                
#[19] "ephemeral perennial"                             "annual biennial perennial short_lived_perennial"


annual_trait <- unique(annual_perennial_traits$value[grepl("annual", annual_perennial_traits$value)])


#number of records with 'annual' value
sum(annual_perennial_traits$value %in% annual_trait)
#12441

#write.csv(annual_perennial_traits, 'data_out/life_form_traits.csv')

#records of annuals
annual_species_data <- subset(annual_perennial_traits, value %in% annual_trait)

#write.csv(annual_species_data, 'data_out/annual_species.csv')

#annual_perennial_traits <- read.csv('data_out/life_form_traits.csv')

#annual_species_data <- read.csv('data_out/annual_species.csv')

#vector containing names of all annual taxa from austraits
annual_species <- unique(annual_species_data$taxon_name)

#unique taxa with at least one record of annual life history form
length(unique(annual_species_data$taxon_name))
#4427

fowlers_veg$in_austraits_lf <- fowlers_veg$scientificName %in% annual_perennial_traits$taxon_name
#206 species in the fowlers_veg df are not in austraits 'lifeform' - mostly due to not being a species (genus, family etc)

fowlers_life_form <- annual_perennial_traits %>%
  filter(taxon_name %in% fowlers_veg$scientificName |
           taxon_name %in% ausplot_counts$herbarium_determination)

most_frequent_lifeform <- fowlers_life_form %>%
  group_by(taxon_name) %>%
  summarise(most_common_lifeform = names(sort(table(value), decreasing = TRUE))[1])

fowlers_veg <- fowlers_veg %>%
  left_join(most_frequent_lifeform, by = c("scientificName" = "taxon_name"))

fowlers_veg <- fowlers_veg %>%
  mutate(simp_lf = case_when(
    grepl('annual', most_common_lifeform, ignore.case = TRUE) ~ 'annual',
    grepl('perennial', most_common_lifeform, ignore.case = TRUE) ~ 'perennial',
    TRUE ~ most_common_lifeform
  ))

vegPI <- vegPI %>%
  left_join(most_frequent_lifeform, by = c("herbarium_determination" = "taxon_name"))


vegPI <- vegPI %>%
  mutate(simp_lf = case_when(
    grepl('annual', most_common_lifeform, ignore.case = TRUE) ~ 'annual',
    grepl('perennial', most_common_lifeform, ignore.case = TRUE) ~ 'perennial',
    TRUE ~ most_common_lifeform
  ))

#save csvs for ausplots/ALA + lifeform
write.csv(vegPI, 'data_out/ausplots_species_with_lifeform.csv')

write.csv(fowlers_veg, 'data_out/ALA_FG_species_with_lifeform.csv')

vegPI <- merge(vegPI, veg$site.info[, c("site_location_name", "visit_start_date")], by = "site_location_name", all.x = TRUE)

vegPI %>% 
  filter(site_location_visit_id == 53604) %>% #emu pen visit
  drop_na(herbarium_determination) %>%
  ggplot(aes(x = X_plot, y = Y_plot, shape = family, color = simp_lf)) +
  geom_point() +
  scale_shape_manual(values = c(1:19)) +
  theme_classic() +
  labs(y = 'West (m)', x = 'South (m)') +
  ggtitle(paste(unique(vegPI$site_location_name), " - ",  substr(vegPI$visit_start_date, 1, 10)))


for(current_visit in unique(vegPI$site_unique)){
  curr_df <- filter(vegPI, site_unique == current_visit)
  ggplot(data = curr_df, aes(x = X_plot, y = Y_plot, shape = family, color = simp_lf)) +
    geom_point(na.rm = TRUE) +
    scale_shape_manual(values = c(1:19)) +
    theme_classic() + 
    labs(y = 'West (m)', x = 'South (m)') +
    ggtitle(paste(unique(curr_df$site_location_name), " - ",  substr(curr_df$visit_start_date, 1, 10)))
  ggsave(paste0("maps_graphs/plot_maps/", current_visit, ".png"), width = 10, height = 10, dpi = 320)
}

for(current_visit in unique(vegPI$site_unique)){
  curr_df <- filter(vegPI, site_unique == current_visit)
  
  if (any(is.na(curr_df$herbarium_determination))) {
    na_rm <- TRUE
  } else {
    na_rm <- FALSE
  }
  
  gg <- ggplot(data = curr_df, aes(x = X_plot, y = Y_plot, shape = family, color = simp_lf)) +
    geom_point(na.rm = na_rm) +
    scale_shape_manual(values = c(1:19)) +
    theme_classic() + 
    labs(y = 'West (m)', x = 'South (m)') +
    ggtitle(paste(unique(curr_df$site_location_name), " - ", unique(curr_df$visit_start_date, 1, 10)))
  
  ggsave(paste0("maps_graphs/plot_maps/", current_visit, ".png"), plot = gg, width = 10, height = 10, dpi = 320)
}


# plotting the ausplot species spatially ----------------------------------

#the emu pen site falls within:
#POLYGON((141.69736861 -31.08023472,141.69750889 -31.07934056,141.69855806 -31.07946139,141.69843861 -31.08032806,141.69736861 -31.08023472))

#convert plot based on SW coordinate

# Install and load necessary packages
install.packages("sp")
install.packages("rgdal")
library(sp)
library(rgdal)

# Define the geographic coordinates (latitude and longitude)
latitude <- -31.08023472  # Replace with the actual latitude of your site
longitude <- 141.69736861  # Replace with the actual longitude of your site

# Create a spatial points object
coordinates <- SpatialPoints(matrix(c(longitude, latitude), ncol = 2), 
                             proj4string = CRS("+proj=longlat +datum=WGS84"))

# Define the coordinate reference system (CRS) for Western NSW, Australia
crs <- CRS("+proj=utm +zone=54 +south +datum=WGS84")

# Transform the coordinates to eastings and northings
transformed_coordinates <- spTransform(coordinates, crs)

# Extract eastings and northings
eastings <- coordinates(transformed_coordinates)[1]
northings <- coordinates(transformed_coordinates)[2]

#new df for emu pen only data
emu_pen_veg <- vegPI %>%
  filter(site_location_name == 'NSABHC0009')

#adding SW corner eastings and northings to X and Y values - although this is not a legit fix, as the polygon isnt due north
emu_pen_veg$X_plot <- emu_pen_veg$X_plot + eastings
emu_pen_veg$Y_plot <- emu_pen_veg$Y_plot + northings



# Create a SpatialPointsDataFrame
coordinates <- cbind(emu_pen_veg$X_plot, emu_pen_veg$Y_plot)
crs <- CRS("+proj=utm +zone=54 +south +datum=WGS84")  # Replace with the appropriate CRS for your data
spatial_points <- SpatialPointsDataFrame(coordinates, emu_pen_veg, proj4string = crs)

# Transform to WGS84 (latitude and longitude)
wgs84_crs <- CRS("+proj=longlat +datum=WGS84")
spatial_points_wgs84 <- spTransform(spatial_points, wgs84_crs)

# Extract latitude and longitude
emu_pen_veg$Longitude <- coordinates(spatial_points_wgs84)[, 1]
emu_pen_veg$Latitude <- coordinates(spatial_points_wgs84)[, 2]

library(sf)

FG_WG <- read.csv('data/FG_WG_locations.csv')

coordinates <- cbind(FG_WG$Northing, FG_WG$Easting)
crs <- CRS("+proj=utm +zone=54 +south +datum=WGS84")  # Replace with the appropriate CRS for your data
spatial_points <- SpatialPointsDataFrame(coordinates, FG_WG, proj4string = crs)

# Transform to WGS84 (latitude and longitude)
wgs84_crs <- CRS("+proj=longlat +datum=WGS84")
spatial_points_wgs84 <- spTransform(spatial_points, wgs84_crs)

# Extract latitude and longitude
FG_WG$Longitude <- coordinates(spatial_points_wgs84)[, 1]
FG_WG$Latitude <- coordinates(spatial_points_wgs84)[, 2]

FG_WG$Rainfall_Gauge <- "Rainfall Gauge"

ggplot() +
  geom_sf(data = FG_area, fill = NA) +
  geom_point(data = fowlers_veg, alpha = 0.6, color = 'grey50', 
              aes(x = decimalLongitude, y = decimalLatitude, fill = "ALA obs")) +
  geom_point(data = FG_WG, size = 2, color = 'red',
             aes(x = Longitude, y = Latitude, shape = Rainfall_Gauge)) +
  geom_point(data = veg$site.info, size = 6, alpha = 0.6, shape = 15,
             aes(x = longitude, y = latitude, color = site_location_name)) +
  theme_minimal() +
  theme(panel.background = element_rect(fill = "white", color = 'white'),  # Set the panel background color to white
plot.background = element_rect(fill = "white", color = 'white'),   # Set the overall plot background color to white
legend.background = element_rect(fill = "white", color = 'white')) +
  scale_color_hue(labels = c('emu pen', 'NSABHC0010', 'sandstone', 'NSABHC0012', 'conservation', 'freislich')) +
  scale_fill_manual(labels = c("ALA observations"), values = c("grey50")) +
  guides(fill = guide_legend(title = NULL),
         shape = guide_legend(title = NULL)) +
  labs(color = "ausplot site locations",
       x = "",
       y = "")

ggsave('maps_graphs/fowlers_obs_map.png')

unique(fowlers_veg$dataResourceName)

ggplot() +
  geom_sf(data = FG_area, fill = NA) +
  geom_point(data = fowlers_veg, alpha = 0.6, 
             aes(x = decimalLongitude, y = decimalLatitude, fill = simp_lf)) +
  geom_point(data = veg$site.info, size = 6, alpha = 0.6,
             aes(x = longitude, y = latitude, color = site_location_name)) +
  geom_point(data = FG_WG, 
             aes(x = Longitude, y = Latitude)) +
  scale_fill_manual(values = c("red", "orange", "green")) +
  theme_minimal() 

vegPI %>% filter(site_location_visit_id == 53607) |>
  View()



# comparing rainfall to site visit dates ----------------------------------

ausplot_site_dates <- read.csv('data/FG_2022_visit/Fowlers_gap_summary_site_data.csv')

FG_daily_rainfall <- read.csv('data/fowlers_rainfall.csv')

FG_daily_rainfall$Short.Date <- as.Date(paste(FG_daily_rainfall$Year, 
                                               FG_daily_rainfall$Month, 
                                               FG_daily_rainfall$Day, 
                                               sep = "-"), 
                                         format = "%Y-%m-%d")


#pivot longer
ausplot_site_dates_long <- ausplot_site_dates %>% 
  pivot_longer(cols = c(Established.Date, Revisit.Date.1, Revisit.Date.2),
               names_to = "Visit_Number",
               values_to = "Visit_Date") %>%
  filter(Visit_Date != "") %>%  # Remove rows with empty values in Visit_Date
  arrange(Plot.Name, Visit_Date) %>%
  mutate(Visit_Number = case_when(
    str_detect(Visit_Number, "Established") ~ 1,
    str_detect(Visit_Number, "Revisit.Date.1") ~ 2,
    str_detect(Visit_Number, "Revisit.Date.2") ~ 3
  ))

#as.Date the date
ausplot_site_dates_long$Visit_Date <- as.Date(ausplot_site_dates_long$Visit_Date, format = "%d/%m/%Y")


ggplot() +
  geom_point(data = ausplot_site_dates_long, aes(x = Visit_Date, y = 100, color = Plot.Name), size = 3, position = position_jitter(height = 25)) +
  geom_line(data = FG_daily_rainfall[FG_daily_rainfall$Year >= 2012, ],
            aes(x = Short.Date, y = Rainfall)) + 
  scale_x_date(date_labels = "%Y-%m-%d") +
  scale_x_date(date_labels = "%Y-%m-%d", limits = c(as.Date("2012-01-01"), NA), date_breaks = "6 months") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) 

library(dplyr)
library(purrr)

# Assuming ausplot_site_dates_long is your main data frame
# Assuming FG_daily_rainfall is your rainfall data frame

# Function to calculate rainfall sum for previous n months
calculate_previous_rainfall <- function(visit_date, rainfall_data, n_months) {
  end_date <- visit_date
  start_date <- end_date %m-% months(n_months)
  
  subset_data <- rainfall_data %>%
    filter(Short.Date >= start_date, Short.Date <= end_date)
  
  sum_rainfall <- sum(subset_data$Rainfall, na.rm = TRUE)
  return(sum_rainfall)
}

# Calculate rainfall for previous 1, 3, 6, and 12 months
ausplot_site_dates_long <- ausplot_site_dates_long %>%
  mutate(
    Rainfall_1_month = pmap_dbl(list(Visit_Date, list(FG_daily_rainfall), 1), calculate_previous_rainfall),
    Rainfall_3_months = pmap_dbl(list(Visit_Date, list(FG_daily_rainfall), 3), calculate_previous_rainfall),
    Rainfall_6_months = pmap_dbl(list(Visit_Date, list(FG_daily_rainfall), 6), calculate_previous_rainfall),
    Rainfall_12_months = pmap_dbl(list(Visit_Date, list(FG_daily_rainfall), 12), calculate_previous_rainfall)
  )

# Print the resulting data frame
print(ausplot_site_dates_long)


# Given date
given_date <- as.Date("2024-02-01", format = "%Y-%m-%d")

# Calculate rainfall for previous 1, 3, 6, and 12 months
rainfall_for_given_date <- data.frame(
  Date = given_date,
  Rainfall_1_month = calculate_previous_rainfall(given_date, FG_daily_rainfall, 1),
  Rainfall_3_months = calculate_previous_rainfall(given_date, FG_daily_rainfall, 3),
  Rainfall_6_months = calculate_previous_rainfall(given_date, FG_daily_rainfall, 6),
  Rainfall_12_months = calculate_previous_rainfall(given_date, FG_daily_rainfall, 12)
)

# Function to calculate the number of days with rainfall greater than 0 for previous n months
calculate_previous_rainfall_days <- function(end_date, rainfall_data, n_months) {
  start_date <- end_date %m-% months(n_months)
  
  subset_data <- rainfall_data %>%
    filter(Short.Date >= start_date, Short.Date <= end_date, Rainfall > 0)
  
  num_rainfall_days <- nrow(subset_data)
  return(num_rainfall_days)
}

# Calculate number of rainfall days for each visit
ausplot_site_dates_long <- ausplot_site_dates_long %>%
  mutate(
    RainfallDays_1_month = map_int(Visit_Date, ~ calculate_previous_rainfall_days(.x, FG_daily_rainfall, 1)),
    RainfallDays_3_months = map_int(Visit_Date, ~ calculate_previous_rainfall_days(.x, FG_daily_rainfall, 3)),
    RainfallDays_6_months = map_int(Visit_Date, ~ calculate_previous_rainfall_days(.x, FG_daily_rainfall, 6)),
    RainfallDays_12_months = map_int(Visit_Date, ~ calculate_previous_rainfall_days(.x, FG_daily_rainfall, 12))
  )

ggplot(ausplot_site_dates_long, aes(x = Plot.Name, y = Rainfall_1_month, fill = as.factor(Visit_Date))) +
  geom_col(position = "dodge") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Reshape the data for facet_wrap
ausplot_site_dates_long_long <- pivot_longer(
  ausplot_site_dates_long,
  cols = c(Rainfall_1_month, Rainfall_3_months, Rainfall_6_months, Rainfall_12_months),
  names_to = "Rainfall_Type",
  values_to = "Rainfall"
)

# Create the plot
ggplot(ausplot_site_dates_long_long, aes(x = Plot.Name, y = Rainfall, fill = as.factor(Visit_Date))) +
  geom_col(position = "dodge") +
  facet_wrap(~ Rainfall_Type, scales = "free_y", nrow = 2, ncol = 2) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  labs(fill = 'Visit Date')

# Reshape the data for facet_wrap
ausplot_site_dates_long_long <- pivot_longer(
  ausplot_site_dates_long,
  cols = c(Rainfall_1_month, Rainfall_3_months, Rainfall_6_months, Rainfall_12_months,
           RainfallDays_1_month, RainfallDays_3_months, RainfallDays_6_months, RainfallDays_12_months),
  names_to = "Rainfall_Type",
  values_to = "Rainfall"
)


ausplot_site_dates_long_long$Rainfall_Type <- factor(
  ausplot_site_dates_long_long$Rainfall_Type,
  levels = c("Rainfall_1_month", "Rainfall_3_months", "Rainfall_6_months", "Rainfall_12_months",
             "RainfallDays_1_month", "RainfallDays_3_months", "RainfallDays_6_months", "RainfallDays_12_months")
)

ausplot_site_dates_long_long$Visit_Year_Mon <- as.factor(substr(ausplot_site_dates_long_long$Visit_Date, 1, 7))


ggplot(ausplot_site_dates_long_long, aes(x = Plot.Name, y = Rainfall, fill = as.factor(Visit_Year_Mon))) +
  geom_col(position = "dodge") +
  facet_wrap(~ Rainfall_Type, scales = "free_y", nrow = 2, ncol = 4) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
        panel.background = element_rect(fill = "white"),  # Set the panel background color to white
        plot.background = element_rect(fill = "white"),   # Set the overall plot background color to white
        legend.background = element_rect(fill = "white")) +
  labs(fill = 'Visit Date')

ggsave('maps_graphs/rainfall_sample_dates.png', width = 15, height = 10)
