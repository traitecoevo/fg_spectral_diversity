---
title: "Identifying Endemic Australia Plant Genera"
format: html
editor: visual
execute:
  warning: false
  output: true
---

Adele Gemmell

##### This study aims to create a register of vascular plant genera that are endemic to Australia. It compares dispersal traits and IUCN threatened status between endemic and non-endemic genera, to assess traits associated with endemism and threat assessment of endemic taxa,

```{r}
#load libraries 
library(tidyverse)   #data wrangling
library(data.table)  #data wrangling
library(ggplot2)     #plotting
library(austraits)   #for download of austraits
library(rstatix)     #for Wilcox Rank sum test
library(sp)          #for spatial mapping
library(sf)          #for spatial mapping
```

### Read in species lists and occurence data

```{r}
#load in BIG DATA 2022 genera endemism estimate - contains all aus genera, 
#and a proportion of how many Australia species in each genera are endemic 
#to Aus - does not consider species found outside Australia
aus_genera <- read.csv("data/australian_flora/genus_level_endemism_estimate.csv")

#load in species lists/occurence data from NZ, NG, NC, Indonesia, WCVP (Kew Gardens), ALA data
wcvp <- fread(file = "data/wcvp/wcvp_names.csv", header = T)

wcvp_distribution <- fread(file = "data/wcvp/wcvp_distribution.csv", header = T)

ng <- read.csv("data/other_countries_floras/papua_new_guinea_checklist.csv")

nz <- read.csv("data/other_countries_floras/new_zealand_seedplant_checklist.csv")

nz2 <- read.csv("data/other_countries_floras/new_zealand_ferns_lycophyte_checklist.csv")

nc <- read.csv("data/other_countries_floras/new_caledonia_checklist.csv")

indo <- read.csv("data/other_countries_floras/sunda_sahul_checklist.csv")

ala <-read_csv("data/ala/all_ala.csv")

##we can automatically elimate genera with non-endemic aus species
#make new df for geera where all australian species are endemic 
ausplants <- subset(aus_genera, prop_endemic == 1)

```

### Assessing shared genera between Australia and neighbouring countries

```{r}
##NZ
#combine nz and nz2 to create full NZ list
nz <- rbind(nz, nz2)

#remove ? from genus column value in nz data
nz$Genus <- gsub("\\?", "", nz$Genus)

#remove exotic genera from list
nz<-filter(nz, Origin!="Exotic")

#create new column to confirm presence of genera in NZ
ausplants$nz <- ausplants$genus %in% nz$Genus

##New Caledonia

#create new column to confirm presence of genera in NC
ausplants$nc <- ausplants$genus %in% nc$Genre

##New Guinea

#create new column to confirm presence of genera in NG
ausplants$ng <- ausplants$genus %in% ng$Genus


##Sunda-Sahul Convergence Zone

#remove australian flora as this dataset includes species from multiple countries
indo_non_aus<-filter(indo,!grepl("Aus",Country))

#problem with Singapore data - records from overseas herbariums including Australia affecting validity of these records
indo2 <-filter(indo_non_aus,!grepl("Sin",Country)) 

#create new column to confirm presence of genera in SSCZ
ausplants$indo2 <- ausplants$genus %in% indo2$Genus
```

### Combining WCVP Data and removing records from Australia

```{r}
#combing WCVP distribution file with WCVP records file
wcvp_comb <- wcvp_distribution %>%
  left_join(wcvp, by = 'plant_name_id') 

#removing Australian records 
wcvp_not_aus <- wcvp_comb %>%
  filter(region != "Australia") #removing all Australian plants

#creating file for Australian records
wcvp_aus <- wcvp_comb %>%
  filter(region == "Australia")

#create new column to confirm presence of genera overseas in WCVP data
ausplants$wcvp <- ausplants$genus %in% wcvp_not_aus$genus 
```

### Assess proportion of ALA data found inside Australia

```{r}
#add prop_aus column for proportion of points for each genus (found in aus)/(found out of aus) and total 
group_by(ala,genus) %>%
    summarise(prop_aus=(sum(countryCode=="AU",na.rm=T)/sum(!is.na(countryCode))),
              n=sum(!is.na(countryCode)))->sum_ala #(check on this?)

#add ALA column, such that if <99% of data records are found outside aus, considered found overseas in ALA data
ausplants <- left_join(ausplants, sum_ala)

ausplants <- ausplants %>%
  mutate(ala = prop_aus<0.99)

#ausplants <- read_csv('intermediate_data/five_sources_summary.csv')

```

### Initial endemism assessment - endemic, non-endemic, unclear

```{r}
#select rows indicating presence of genera in other datasets
ausplants %>%
  dplyr::select(nz, nc, ng, wcvp, indo2, ala)->tst

#calculate rowsums for 'TRUE' scores - ie. number of rows where genera is found in other countries
ausplants$rowsums<-rowSums(tst)

#create new column indicating endemism assessment - unclear where only 1 dataset includes genera records outside of australia
ausplants$current_knowledge<-case_when(ausplants$rowsums>=2 ~ "non-endemic",
          ausplants$rowsums==1 ~ "unclear",
          ausplants$rowsums==0 ~ "endemic")
          
```

### Update endemism assessments after manual assessment of unclears

```{r message=FALSE}
#create new df with only 'unclear' genera
unclear <- ausplants[ausplants$current_knowledge == 'unclear', ]

#add reason column, to denote reason for confirming endemic/non-endemic status
unclear$reason <- NA

#add endemism status with reason for uncertainty/assessment
unclear$current_knowledge[1] <- 'endemic' 
unclear$reason[1] <- 'ALA taxonomy error'

unclear$current_knowledge[2] <- 'non-endemic' 
unclear$reason[2] <- 'taxonomy error'

unclear$current_knowledge[3] <- 'endemic' 
unclear$reason[3] <- 'POWO data error'

unclear$current_knowledge[4] <- 'endemic' 
unclear$reason[4] <- 'records from 1950s, PNG occurence from NSW Bot Gardens'

unclear$current_knowledge[5] <- 'endemic' 
unclear$reason[5] <- 'POWO data error'

unclear$current_knowledge[6] <- 'endemic'
unclear$reason[6] <- 'Indo data error'

unclear$current_knowledge[7] <- 'endemic'
unclear$reason[7] <- 'POWO data error'

unclear$current_knowledge[8] <- 'non-endemic'
unclear$reason[8] <- 'NC occurence'

unclear$current_knowledge[9] <- 'non-endemic'
unclear$reason[9] <- 'taxonomic error - synonym Machaerina used'

unclear$current_knowledge[10] <- 'non-endemic'
unclear$reason[10] <- 'PNG native'

unclear$current_knowledge[11] <- 'endemic'
unclear$reason[11] <- 'ALA data/shapefile error'

unclear$current_knowledge[12] <- 'endemic'
unclear$reason[12] <- 'ALA data/shapefile error'

unclear$current_knowledge[13] <- 'endemic'
unclear$reason[13] <- 'ornamental plant in UK'

unclear$current_knowledge[14] <- 'endemic'
unclear$reason[14] <- 'taxonomic uncertainty - WCVP says 4 species, zimbabwe flora mentions only 1 accepted species'

unclear$current_knowledge[15] <- 'endemic'
unclear$reason[15] <- 'ng data error'

unclear$current_knowledge[16] <- 'non-endemic'
unclear$reason[16] <- 'taxonomy error, NZ species'

unclear$current_knowledge[17] <- 'endemic'
unclear$reason[17] <- 'introduced NZ and California'

unclear$current_knowledge[18] <- 'endemic'
unclear$reason[18] <- 'introduced India'

unclear$current_knowledge[19] <- 'non-endemic'
unclear$reason[19] <- 'species found in South America'

unclear$current_knowledge[20] <- 'endemic'
unclear$reason[20] <- 'introduced ornamentals in UK'

unclear$current_knowledge[21] <- 'non-endemic'
unclear$reason[21] <- 'species found in Africa, Americas, South Asia etc'

unclear$current_knowledge[22] <- 'endemic'
unclear$reason[22] <- 'taxonomic confusion, tasmania only'

unclear$current_knowledge[23] <- 'non-endemic'
unclear$reason[23] <- 'species found in Africa, Americas, South Asia etc'

unclear$current_knowledge[24] <- 'endemic'
unclear$reason[24] <- 'taxonomic error in indo data'

unclear$current_knowledge[25] <- 'non-endemic'
unclear$reason[25] <- 'found in americas'

unclear$current_knowledge[26] <- 'non-endemic'
unclear$reason[26] <- 'found in PNG POWO taxonomic confusion'

unclear$current_knowledge[27] <- 'endemic'
unclear$reason[27] <- 'POWO error'

unclear$current_knowledge[28] <- 'non-endemic'
unclear$reason[28] <- 'taxonomic uncertainty'

unclear$current_knowledge[29] <- 'non-endemic'
unclear$reason[29] <- 'dist in South America'

unclear$current_knowledge[30] <- 'non-endemic'
unclear$reason[30] <- 'dist in PNG'

unclear$current_knowledge[31] <- 'endemic'
unclear$reason[31] <- 'introdced to india - POWO mismatch'

unclear$current_knowledge[32] <- 'endemic'
unclear$reason[32] <- 'ALA error (Georgiella species entered as Georgeantha'

unclear$current_knowledge[33] <- 'non-endemic'
unclear$reason[33] <- 'Madagascar distribution'

unclear$current_knowledge[34] <- 'endemic'
unclear$reason[34] <- 'introdced to New Zealand - POWO mismatch'

unclear$current_knowledge[35] <- 'non-endemic'
unclear$reason[35] <- 'taxonomic confusion - synonym w justicia'

unclear$current_knowledge[36] <- 'endemic'
unclear$reason[36] <- 'endemic to lord howe - record in NZ?'

unclear$current_knowledge[37] <- 'endemic'
unclear$reason[37] <- 'taxonomic confusion - unplaced in POWO'

unclear$current_knowledge[38] <- 'endemic'
unclear$reason[38] <- 'ALA data error'

unclear$current_knowledge[39] <- 'endemic'
unclear$reason[39] <- 'ALA data error'

unclear$current_knowledge[40] <- 'non-endemic'
unclear$reason[40] <- 'distribution in Chile'

unclear$current_knowledge[41] <- 'endemic'
unclear$reason[41] <- 'ALA data error'

unclear$current_knowledge[42] <- 'non-endemic'
unclear$reason[42] <- 'species found in Africa, Asia, Australia'

unclear$current_knowledge[43] <- 'endemic'
unclear$reason[43] <- 'Indo data error'

unclear$current_knowledge[44] <- 'non-endemic'
unclear$reason[44] <- 'species endemic to Norfolk Island'

unclear$current_knowledge[45] <- 'endemic'
unclear$reason[45] <- 'introduced to NZ and India'

unclear$current_knowledge[46] <- 'endemic'
unclear$reason[46] <- 'ALA data error'

unclear$current_knowledge[47] <- 'endemic'
unclear$reason[47] <- 'ALA data error'

unclear$current_knowledge[48] <- 'endemic'
unclear$reason[48] <- 'introduced to India'

unclear$current_knowledge[49] <- 'endemic'
unclear$reason[49] <- 'introduced to Czechia'

unclear$current_knowledge[50] <- 'non-endemic'
unclear$reason[50] <- 'species found in Americas and Australia'

unclear$current_knowledge[51] <- 'non-endemic'
unclear$reason[51] <- 'species found in Europe, Africa, Asia, Australia'

unclear$current_knowledge[52] <- 'endemic'
unclear$reason[52] <- 'WVCP data error'

unclear$current_knowledge[53] <- 'endemic'
unclear$reason[53] <- 'ALA data error'

unclear$current_knowledge[54] <- 'endemic'
unclear$reason[54] <- 'introduced to Great Britain'

unclear$current_knowledge[55] <- 'endemic'
unclear$reason[55] <- 'introduced to Great Britain'

unclear$current_knowledge[56] <- 'non-endemic'
unclear$reason[56] <- 'synonym for Ochrosia, found across SE & E asia' #Neisosperma

unclear$current_knowledge[57] <- 'non-endemic'
unclear$reason[57] <- 'synonym for Apostasia, found in SE Asia' #Niemeyera

unclear$current_knowledge[58] <- 'endemic'
unclear$reason[58] <- 'Limited PNG occurrence - introduced, flagged as basis of record invalid' #Oraniopsis

unclear$current_knowledge[59] <- 'non-endemic'
unclear$reason[59] <- 'Known to be native to Bolivia and Chile' #Orites

unclear$current_knowledge[60] <- 'non-endemic'
unclear$reason[60] <- 'Known to be native to Mexico and South America' #Orthrosanthus

unclear$current_knowledge[61] <- 'non-endemic'
unclear$reason[61] <- 'Cosmopolitan genera - synonym: Hemionitis' #Paraceterach

unclear$current_knowledge[62] <- 'endemic'
unclear$reason[62] <- 'Data error - single preserved specimen from PNG' #Peripentadenia

unclear$current_knowledge[63] <- 'non-endemic'
unclear$reason[63] <- 'synonym for Arthrochilus- single sp. in PNG' #Phoringopsis

unclear$current_knowledge[64] <- 'non-endemic'
unclear$reason[64] <- 'synonym for Phreatia' #Plexaure

unclear$current_knowledge[65] <- 'non-endemic'
unclear$reason[65] <- 'synonym for Caltha' #Psychrophila

unclear$current_knowledge[66] <- 'endemic'
unclear$reason[66] <- 'WCVP Data error - single 200 year old record in NZ' #Pyrorchis

unclear$current_knowledge[67] <- 'endemic'
unclear$reason[67] <- 'Data duplication of incorrect point' #Rhinerrhiza

unclear$current_knowledge[68] <- 'non-endemic'
unclear$reason[68] <- 'synonym for Phreatia' #Rhipidorchis

unclear$current_knowledge[69] <- 'endemic'
unclear$reason[69] <- 'Introduced and grown as an ornamental' #Rhodanthe

unclear$current_knowledge[70] <- 'endemic'
unclear$reason[70] <- 'Introduced into NZ, UK, & USA' #Rumicastrum

unclear$current_knowledge[71] <- 'non-endemic'
unclear$reason[71] <- 'Synonym with Goodenia'

unclear$current_knowledge[72] <- 'endemic'
unclear$reason[72] <- 'wcvp incorrect, found in PNG'

unclear$current_knowledge[73] <- 'endemic'
unclear$reason[73] <- 'Taxonomy mix up'

unclear$current_knowledge[74] <- 'non-endemic'
unclear$reason[74] <- 'Found in PNG and Malaysia as well'

unclear$current_knowledge[75] <- 'non-endemic'
unclear$reason[75] <- 'Synonym with Brachypterum, found in southern Asia'

unclear$current_knowledge[76] <- 'endemic'
unclear$reason[76] <- 'Outlier in Indo data, only one point'

unclear$current_knowledge[77] <- 'endemic'
unclear$reason[77] <- 'Introduced to Britain'

unclear$current_knowledge[78] <- 'endemic'
unclear$reason[78] <- 'Small numbers outside, botanical gardens'

unclear$current_knowledge[79] <- 'non-endemic'
unclear$reason[79] <- 'Synonym with Aleurites'

unclear$current_knowledge[80] <- 'non-endemic'
unclear$reason[80] <- 'Synonym with Ardisia'

unclear$current_knowledge[81] <- 'non-endemic'
unclear$reason[81] <- 'Found in South America as well'

unclear$current_knowledge[82] <- 'endemic'
unclear$reason[82] <- 'Error in occurrence data, single occurrences outside Australia (oriental/botanical gardens)'

unclear$current_knowledge[83] <- 'endemic'
unclear$reason[83] <- 'taxonomic within genus'

unclear$current_knowledge[84] <- 'non-endemic'
unclear$reason[84] <- 'Native to US and found else where in the world'

unclear$current_knowledge[85] <- 'non-endemic'
unclear$reason[85] <- 'Found in NZ, ALA incorrect'

unclear$current_knowledge[86] <- 'non-endemic'
unclear$reason[86] <- 'Found in New Caledonia and Papua New Guinea'

unclear$current_knowledge[87] <- 'non-endemic'
unclear$reason[87] <- 'Found in Myanmar'

#remove unclears from ausplants df
ausplants <- ausplants[ausplants$current_knowledge != "unclear", ]

#add back now classified 'unclear' genera
ausplants <- rbind(ausplants, unclear[1:13])

#order alphabetically
ausplants <- ausplants[order(ausplants$genus), ]

#rename current_knowlege column to endemism_status
colnames(ausplants)[colnames(ausplants) == 'current_knowledge'] <- 'endemism_status'

#save register of endemic plant genera
ausplants[ , c(1, 3, 13)] %>% 
  filter(endemism_status == 'endemic') %>%
  write_csv('data_out/register_of_endemic_plant_genera.csv')
```

### Combine endemic and non-endemic genera for trait/IUCN comparison

```{r}
#create non-endemic subset where proportion endemic aus species was <1 (from 2022 Big Data Project)
non_end <- subset(aus_genera, prop_endemic < 1)

#create endemism classification column
non_end$endemism_status <- 'non-endemic'

#combine non-endemic and dataframe ausplants to represent all aus genera with classification
all_aus_genera <- rbind(non_end[ , c(1,4)], ausplants[ , c(1,13)])

```

### Adding Threatened Status from IUCN data

```{r}
#read in red list data 
redlist <- read.csv(file = "data/REDLIST_Folder/simple_summary.csv", header = T)

#Filters redlist data to only include genera within all_aus_genera data
redlist <- redlist %>%
  filter(genusName %in% all_aus_genera$genus) 


#combine the two 'Lower Risk' categories
redlist$redlistCategory <- gsub("Lower Risk/(conservation dependent|near threatened)", "Lower Risk", redlist$redlistCategory)

#remove extinct records
redlist <- redlist %>%
  filter(redlistCategory != "Extinct")

#Creating counts frame for each threatened status
counts <- redlist %>% 
  group_by(genusName) %>%
  count(redlistCategory) %>%
  pivot_wider(names_from = redlistCategory, values_from = n, values_fill = NA) 


# Join the counts with fivesource.trial based on genera2
all_aus_status <- all_aus_genera  %>%
  left_join(counts, by = c("genus" = "genusName")) %>% 
  #remove NAs
  mutate_at(c(3:9), ~replace_na(.,0))

write_csv(all_aus_status, 'data_out/all_genera_with_threatened_status.csv')


```

## Adding Austraits data - dispersal + growth form traits

```{r}
#load austraits
devtools::install_github("traitecoevo/austraits")
austraits <- load_austraits(version = "4.1.0", path = "intro/downloads")

#make genus_list from our australian genera df
genus_list <- all_aus_genera$genus

#now select the categorical traits we want to extract - dispersal appendage, syndrome, plant growth form using the extract_trait function
cat_traits <- austraits %>% extract_trait(c('dispersal_syndrome', 'plant_growth_form'))

#join traits to produce dataframe 
cat_traits_joined <- left_join(cat_traits[["traits"]], cat_traits[["taxa"]], by = "taxon_name")

#keep only records for genera on our australian genera list
cat_traits_joined <- cat_traits_joined[cat_traits_joined$genus %in% genus_list, ]

#pivot df such that each row is a genus from the australian genera list, and the most commonly recorded plant growth, dispersal appendage, dispersal syndrome traits are applied for each genus
austraits_genera <- cat_traits_joined %>%
  dplyr::select(genus, trait_name, value) %>%
  pivot_wider(names_from = trait_name, values_from = value, values_fn = max)

#now the same for seed_traits
disp_traits <- austraits %>% extract_trait(c('seed_dry_mass', 'plant_height'))

#seed traits joined
disp_traits_joined <- left_join(disp_traits[["traits"]], disp_traits[["taxa"]], by = "taxon_name")

#keep only records for genera on our australian genera list
disp_traits_joined <- disp_traits_joined[disp_traits_joined$genus %in% genus_list, ]

#pivot df such that each row is a genus from the australian genera list, and the mean of recorded dry_seed_mass are applied for each genus
disp_genera <- disp_traits_joined %>%
  dplyr::select(genus, trait_name, value) %>%
  pivot_wider(names_from = trait_name, values_from = value, values_fn = mean)


#add categorical traits and numerical seed mass traits together
austraits_genera <- left_join(austraits_genera, disp_genera, by = 'genus')

#write csv for all australian genera with traits
write_csv(austraits_genera, 'data_out/all_genera_with_traits.csv')
```

### Wilcox Rank sum test - dry seed mass & plant height

```{r}
#adding the endemism status to this dataframe for subsequent plotting and tests
genera <- merge(austraits_genera, all_aus_genera[1:2], by = 'genus', all.x = TRUE)

#wilcox rank sum test for seed_dry_mass 
seed_test <- genera %>% 
  wilcox_test(seed_dry_mass ~ endemism_status) %>%
  add_significance()
seed_test #p < 0.0.000733, significant

#wilcox rank sum test for plant_height
height_test <- genera %>% 
  wilcox_test(plant_height ~ endemism_status) %>%
  add_significance()
height_test #p < 0.0.0005, significant

```

### Seed mass results - violin plot

```{r}
#plotting of seed_dry_mass - violin plot w boxplot
violin_seed <- ggplot(genera, aes(x = endemism_status, y = seed_dry_mass, fill = endemism_status)) +
  geom_violin() +
  scale_fill_brewer() +
  labs(fill = 'Endemic status', x = 'Endemic status', y = 'log dry seed mass (mg)', title = 'Mean seed mass of endemic and non-endemic genera') + 
  theme_bw() +
  scale_y_log10(labels = function(x) sprintf("%.0f", x)) +#remove sci notation+
  geom_boxplot(width=0.05) #adds boxplot within violin plot

violin_seed

```

### Plant height results - violin plot

```{r }
#plant height plots - violin w boxplot
violin_height <- ggplot(genera, aes(x = endemism_status, y = plant_height, fill = endemism_status)) +
  geom_violin() +
  scale_fill_brewer() +
  labs(title = 'Mean plant height of endemic and non-endemic genera', fill = 'Endemic status', x = 'Endemic status', y = 'log plant height (cm)') + 
  theme_bw()  +
  scale_y_log10(labels = function(x) sprintf("%.0f", x)) + #remove sci notation+
  geom_boxplot(width=0.05) #adds boxplot within violin plot

violin_height
```

### Simplifying growth forms

```{r }
#plot growth form - yields 25 different categories - poor visualisation
ggplot(genera, aes(x = endemism_status, fill = plant_growth_form)) +
  geom_bar() +
  theme_bw()

#simplifying growth form to combine categories which begin with climber, fern, graminoids, shrub/include shrub, tree, herb. new column growth_form_simp
genera <- genera %>%
  mutate(growth_form_simp = case_when(
    startsWith(plant_growth_form, "climber") ~ "climber",
    startsWith(plant_growth_form, "fern") ~ "fern",
    startsWith(plant_growth_form, "graminoid") ~ "graminoid",
    startsWith(plant_growth_form, "shrub") ~ "shrub",
    grepl("shrub", plant_growth_form, ignore.case = TRUE) ~ "shrub",
    startsWith(plant_growth_form, "tree") ~ "tree",
    startsWith(plant_growth_form, "herb") ~ "herb",
    TRUE ~ plant_growth_form
  ))

#calculating proportion of each simplified growth form
proportions_data <- genera %>%
  group_by(endemism_status, growth_form_simp) %>%
  summarize(count = n()) %>%
  group_by(endemism_status) %>%
  mutate(proportion = count / sum(count))

#remove graminoids, lycophyte, palmoids for plotting as these contain ~1 species (but they remain part of proportion calulcations)
proportions  <- proportions_data  %>%
  filter(!(growth_form_simp %in% c("palmoid", "lycophyte", "graminoid")))

#plotting growth forms as a proportion of total number of endemic and non-endemic genera
growth_bar <- ggplot(proportions, aes(x = endemism_status, y = proportion, fill = growth_form_simp)) +
  geom_bar(stat = "identity") +
  labs(x = "Endemism Status", y = "Proportion of genera in each category", title = "Plant growth forms of endemic and non-endemic genera", fill = 'Simplified growth form') +
  theme_bw() 

growth_bar
```

### Chi Squared test for plant growth form

```{r}
#contingency table for growth form
cont_form <- table(genera$growth_form_simp, genera$endemism_status)

#chi square test
chi_form <- chisq.test(cont_form, correct = F)

chi_form
```

### Dispersal syndrome - plots

```{r}
#plot data to view categories - too many categories, poor visualisation, NA and undefined to be removed
ggplot(genera, aes(x = endemism_status, fill = dispersal_syndrome)) +
  geom_bar() +
  theme_bw()

#filter data into main categories
dispersal_filtered <- genera %>%
  filter(dispersal_syndrome %in% c('anemochory', 'hydrochory', 'barochory', 'endozoochory', 'zoochory', 'myrmecochory', 'epizoochory'))

#for consistency, replace endozoochory and epizoochory with zoochory 
dispersal_filtered <- dispersal_filtered %>%
  mutate(dispersal_syndrome = ifelse(dispersal_syndrome %in% c('epizoochory', 'endozoochory'), 'zoochory', dispersal_syndrome))

#now calculate proportional data 
proportions_disp <- dispersal_filtered %>%
  group_by(endemism_status, dispersal_syndrome) %>%
  summarize(count = n()) %>%
  group_by(endemism_status) %>%
  mutate(proportion = count / sum(count))

#display dispersal syndrome plot, proportion to total number in each category
disp_plot <- ggplot(proportions_disp, aes(x = endemism_status, y = proportion, fill = dispersal_syndrome)) +
  geom_bar(stat = "identity") +
  labs(x = "Endemism Status", y = "Proportion of genera in each category", title = "Dispersal syndromes of endemic and non-endemic genera", fill = 'Primary dispersal syndrome') +
  theme_bw() +
  scale_fill_brewer(palette = "Spectral")

disp_plot

```

### Chi square test - dispersal syndrome

```{r}
#create contingency table for chi square test
cont_disp <- table(dispersal_filtered$endemism_status, dispersal_filtered$dispersal_syndrome)

#perform chi square test
chi_disp <- chisq.test(cont_disp, correct = F)

chi_disp
```

### Threatened status - plots

```{r }
#produce df which counts data by endemism status and threatened status
threat_all <- all_aus_status %>%
  group_by(endemism_status) %>%
  summarize(across(matches("Least Concern|Critically Endangered|Endangered|Near Threatened|Vulnerable|Data Deficient|Lower Risk"), sum, na.rm = TRUE)) %>%
  pivot_longer(cols = matches("Least Concern|Critically Endangered|Endangered|Near Threatened|Vulnerable|Data Deficient|Lower Risk"),
               names_to = "threat_status",
               values_to = "count")

#calculate proportions of threatened status per group (endemic + non-endemic)
threat_all <- threat_all %>%
  group_by(endemism_status) %>%
  mutate(proportions = count / sum(count))

#order the threatned status in order of severity
threat_order <- c("Critically Endangered", "Endangered", "Vulnerable", "Near Threatened", "Lower Risk", "Least Concern", "Data Deficient")

# apply this as a factor with the defined order so that plots display preferred order
threat_all$threat_status <- factor(threat_all$threat_status, levels = threat_order)

#proportional bar chart plot 
threat_bar <- ggplot(threat_all, aes(x = endemism_status, y = proportions, fill = threat_status)) +
  geom_bar(stat = "identity") +
  labs(x = "Endemism Status", y = "Proportion of genera in each category", title = "IUCN threatened status of endemic and non-endemic genera", fill = 'IUCN threatened status') +
  theme_bw() +  
  scale_fill_brewer(palette = "RdYlGn")

threat_bar
```

### Threatened status - chi square test

```{r }
#convert threat_all to a longer dataframe, with each count of a threat status
#represented as a row, so it can be converted to contingency table for testing

threat_status <- uncount(threat_all[1:3], weights = count) #remove proportion by selecting rows 1-3

#create contingency table for chi square
cont_status <- table(threat_status$endemism_status, threat_status$threat_status)

#chi square test
chi_status <- chisq.test(cont_status, correct = F)

chi_status
```

### Bioregion mapping - genera per bioregion

```{r warning=FALSE}
##Calculate genera per bioregion and map

#read in endemic genera points - sourced from ALA and filtered to endemics
points <- read.csv('data/ala/locations_endemic_genera.csv')

#convert species points to sp object with point geometries
species_points_sf <- points %>% 
  st_as_sf(coords = c("decimalLongitude", "decimalLatitude"), 
           crs = st_crs(4326))

#set a CRAN mirror for rendering
chooseCRANmirror(ind = 1)  # Replace 1 with the index of the mirror you want to use

#install the 'remotes' package
install.packages("remotes")
library(remotes)

#install bioregions map
remotes::install_github("johnbaums/things")

#read bioregions spatial polygon dataframe. has >9000 polygons but only 89 bioregions
bioregions <- things::ibra7_albers

#set projection
crs_4326 <- CRS("+init=EPSG:4326")

#transform to WGS84 projection - matching points projection
bioregions <- spTransform(bioregions, crs_4326)

#convert to sf object
bioregions_df <- st_as_sf(bioregions)

#apply bioregion location to species occurence
species_bioregion_sf <- st_join(species_points_sf, bioregions_df, join = st_within)

#calculate unique genera per bioregion - rather than occurences (reduces bias of oversampled urban areas)
unique_genera_bioregion_sf <- species_bioregion_sf %>%
  distinct(REG_NAME_7, genus, .keep_all = TRUE) 

#calculate genera per bioregion
genera_counts_per_bioregion <- unique_genera_bioregion_sf %>%
  group_by(REG_NAME_7) %>%
  summarise(genera_count = n(), REG_NAME_7 = first(REG_NAME_7))

# merged polygons into 89 bioregions for better visualisation
merged_sf <- bioregions_df %>%
  group_by(REG_NAME_7) %>%
  summarise(geometry = st_union(geometry)) %>%
  ungroup()

#create grid with bioregion map + genera counts per bioregion
IBRA_grid_bio_gen <- merged_sf %>%
  as_tibble() %>%
  mutate(id = REG_NAME_7) %>%
  full_join(genera_counts_per_bioregion,
            by = join_by(id == REG_NAME_7)) %>%
  st_as_sf()

#plot counts of genera per bioregion
bio_gen_count <- ggplot() +
  geom_sf(data = IBRA_grid_bio_gen, aes(fill = genera_count), size = .01) +
  scale_fill_gradientn(colours = c("orange", "blue"), 
                       na.value = "white", 
                       labels = scales::comma_format(), #removes scientific not
                       n.breaks = 6,
                       guide = guide_colourbar(title = "endemic genera")) +
  coord_sf(ylim = c(-45, -10), 
           xlim = c(110, 155)) +
  labs(x = 'longtiude', y = 'latitude') +
  theme_bw() 

bio_gen_count
```

### Bioregion mapping - genera per bioregion, normalised by area

```{r}
##Calculate species richness normalised by bioregion area + map

#create area column
IBRA_grid_bio_gen$area <- NA

#calculate area of bioregions
IBRA_grid_bio_gen$area <- st_area(IBRA_grid_bio_gen[1])

#normalise species count by area
IBRA_grid_bio_gen$prop_count <- IBRA_grid_bio_gen$genera_count/IBRA_grid_bio_gen$area

# remove the "[1/m²]" unit from 'prop_count' column
IBRA_grid_bio_gen$prop_count <- gsub("\\s*\\[1/m²\\]", "", IBRA_grid_bio_gen$prop_count)

# convert 'prop_count' to numeric 
IBRA_grid_bio_gen$prop_count <- as.numeric(IBRA_grid_bio_gen$prop_count)

#multiply by 1000000 for species richness density/km2 (was density/m2)
IBRA_grid_bio_gen$prop_count <- IBRA_grid_bio_gen$prop_count * 1000000

#plot normalised species richness
bioregion_prop_gen <- ggplot() +
  geom_sf(data = IBRA_grid_bio_gen, aes(fill = prop_count), size = .01) +
  scale_fill_gradientn(
    colours = c("orange", "blue"),
    na.value = "white",
    trans = "log10", #scale in log format for best visualisation
    labels = scales::comma_format(), #remove sci. notation
    n.breaks = 6,
    guide = guide_colourbar(title = "endemic genera \nper km²")
  ) +
  coord_sf(ylim = c(-45, -10), 
           xlim = c(110, 155)) +
  labs(x = 'longitude', y = 'latitude') +
  theme_bw()

bioregion_prop_gen
```

### Secondary analysis - regional endemism of genera

```{r}
##Calculate bioregions which contain genera found only within their bioregion

#calculate the number of bioregions each genera are found within
genus_occurrences <- unique_genera_bioregion_sf %>%
  group_by(genus) %>%
  summarise(unique_regions = n_distinct(REG_NAME_7), REG_NAME_7 = first(REG_NAME_7))

#filter df to only genera found in one bioregion
genus_occurrences <- genus_occurrences %>%
  filter(unique_regions == 1)

#for each bioregion, count the number of genera found in only one bioregion
bioregion_counts <- genus_occurrences %>%
  group_by(REG_NAME_7) %>%
  summarise(regionally_endemic_genera_count = n())

#arrange in descending order
bioregion_counts <- arrange(bioregion_counts, desc(regionally_endemic_genera_count))


#print the top 5 regions containing endemic genera
head(bioregion_counts, 5)


```
